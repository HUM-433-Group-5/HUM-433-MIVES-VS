# -*- coding: 
#tf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\droxl\Documents\EPFL\MA2\SHS\values.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from Indicator_function import *
from Graphic_output import *
from Table_output import Table
#from PyQt5.QtGui import *
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QInputDialog
#import sys
from dialog import Ui_Dialog

class Ui_ValuesWindow(QMainWindow):

    def setupUi(self, MainWindow_obj, MainWindow, complete_dictionnary, indicator_dictionnary,t):
        self.image_width = 800
        self.MainWindow = MainWindow
        self.MainWindow_obj = MainWindow_obj
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1300, 776)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, self.image_width, 731))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("node_style.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")

        # Have the data from previous tree in self
        self.t = t
        self.complete_dictionnary = complete_dictionnary
        self.indicator_dictionnary = indicator_dictionnary

        self.verticalLayoutWidget = {}
        self.verticalLayout = {}

        self.doubleSpinBox = [[] * 3]
        self.units = []
        self.minmax = []

        self.nb_column = 0
        self.nb_output = 0
        self.name_indic = []
        self.minmax_dictionnary = {}

        self.variants = {}
        
        for node  in self.t.traverse("postorder"):
            if node.is_leaf():
                # ROMAIN
                if self.indicator_dictionnary[node.name]["binary"] == False:
                    self.minmax_dictionnary[node.name] = (indicator_dictionnary[node.name]["x_min"], indicator_dictionnary[node.name]["x_max"], indicator_dictionnary[node.name]["unit"])
                else :
                    self.minmax_dictionnary[node.name] = (0,1, indicator_dictionnary[node.name]["unit"])

        self.verticalLayoutWidget_units = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_units.setGeometry(QtCore.QRect(self.image_width + 20, 0, 111, 631))
        self.verticalLayoutWidget_units.setObjectName("verticalLayoutWidget_units")

        self.verticalLayout_units = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_units)
        self.verticalLayout_units.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_units.setObjectName("verticalLayout_units")

        for i, (min, max, un) in self.minmax_dictionnary.items():
            self.units.append(QtWidgets.QLabel(self.verticalLayoutWidget_units))
            self.units[-1].setObjectName("units_"+i)
            self.units[-1].setText(un)
            self.verticalLayout_units.addWidget(self.units[-1])

            self.minmax.append(QtWidgets.QLabel(self.verticalLayoutWidget_units))
            self.minmax[-1].setObjectName("minmax_"+i)
            self.minmax[-1].setText(str(min)+ " : " + str(max))
            self.verticalLayout_units.addWidget(self.minmax[-1])

        self.New = QtWidgets.QPushButton(self.centralwidget)
        self.New.setGeometry(QtCore.QRect(self.image_width + 140, 660, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.New.setFont(font)
        self.New.setObjectName("New")
        self.New.clicked.connect(self.new)

        self.Copy = QtWidgets.QPushButton(self.centralwidget)
        self.Copy.setGeometry(QtCore.QRect(self.image_width + 230, 660, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.Copy.setFont(font)
        self.Copy.setObjectName("Copy")
        self.Copy.clicked.connect(self.copy)

        self.Redo = QtWidgets.QPushButton(self.centralwidget)
        self.Redo.setGeometry(QtCore.QRect(self.image_width + 320, 660, 75, 23))
        font = QtGui.QFont()
        font.setPointSize(6)
        self.Redo.setFont(font)
        self.Redo.setObjectName("Remove")
        self.Redo.clicked.connect(self.reset)

        self.Next = QtWidgets.QPushButton(self.centralwidget)
        self.Next.setGeometry(QtCore.QRect(self.image_width + 280,700, 121, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Next.setFont(font)
        self.Next.setIconSize(QtCore.QSize(56, 56))
        self.Next.setCheckable(True)
        self.Next.setObjectName("Next")
        self.Next.clicked.connect(self.next_page)

        self.Previous = QtWidgets.QPushButton(self.centralwidget)
        self.Previous.setGeometry(QtCore.QRect(self.image_width + 130, 700, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Previous.setFont(font)
        self.Previous.setIconSize(QtCore.QSize(56, 56))
        self.Previous.setCheckable(True)
        self.Previous.setObjectName("Previous")
        self.Previous.clicked.connect(self.previous)


        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 935, 22))
        self.menubar.setObjectName("menubar")

        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.var_name = []

        for position in range(3):
            self.verticalLayoutWidget[position] = QtWidgets.QWidget(self.centralwidget)
            self.verticalLayoutWidget[position].setGeometry(QtCore.QRect(self.image_width+ 120 * (position + 1), 0, 111, 631))
            self.verticalLayoutWidget[position].setObjectName("verticalLayoutWidget_" + str(position))

            self.verticalLayout[position] = QtWidgets.QVBoxLayout(self.verticalLayoutWidget[position])
            self.verticalLayout[position].setContentsMargins(0, 0, 0, 0)
            self.verticalLayout[position].setObjectName("verticalLayout_" + str(position))
        
            self.var_name.append(QtWidgets.QLabel(self.centralwidget))
            self.var_name[position].setGeometry(QtCore.QRect(self.image_width + 120 * (position + 1), 0, 111, 20))

            self.var_name[position].setObjectName("name_"+str(position))


        self.inherit_variants(True)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MIVES"))
        self.Next.setText(_translate("MainWindow", "Next"))
        self.Previous.setText(_translate("MainWindow", "Previous"))
        self.New.setText(_translate("MainWindow", "New"))
        self.Copy.setText(_translate("MainWindow", "Copy"))
        self.Redo.setText(_translate("MainWindow", "Remove"))

    def inherit_variants(self, show_var = False):
        self.variants = self.MainWindow_obj.variants
        if show_var:
            self.nb_column = len(self.variants)
            for i in range(self.nb_column):
                self.show_variant(list(self.variants.keys())[i], i)
            
        return

    def update_variants(self):
        i = 0
        for varient_name, _ in self.variants.items():
            j = 0
            for name, _ in self.minmax_dictionnary.items():
                self.variants[varient_name][name] = self.doubleSpinBox[i][j].value()
                j += 1
            i += 1

    def previous(self):
        self.update_variants()

        self.MainWindow_obj.variants = self.variants
        self.MainWindow.close()
        
    def get_vertical_layout(self, position):
        return self.verticalLayoutWidget[position], self.verticalLayout[position]

    def show_variant(self, variant_name = None, index = None):
        if index == None:
            index = self.nb_column
        widget, layout  = self.get_vertical_layout(index)

        while len(self.doubleSpinBox) <= index:
            self.doubleSpinBox.append([])

        self.doubleSpinBox[index] = []


        if variant_name == None:
            variant_name = "Unspecified" + str(index)
            self.var_name[index].setText(variant_name)
            self.variants[variant_name] = {}
        else:
            self.var_name[index].setText(variant_name)


        variant = self.variants[variant_name]

        for name, (min, max, un) in self.minmax_dictionnary.items():
            self.doubleSpinBox[index].append(QtWidgets.QDoubleSpinBox(widget))
            self.doubleSpinBox[index][-1].setMinimum(float(min))
            self.doubleSpinBox[index][-1].setMaximum(float(max))

            if name in variant:
                self.doubleSpinBox[index][-1].setValue(variant[name])
            else:
                self.doubleSpinBox[index][-1].setValue(min)
                variant[name] = min

            self.doubleSpinBox[index][-1].setObjectName("doubleSpinBox2_"+name)
            layout.addWidget(self.doubleSpinBox[index][-1])

    def new(self):
        if self.nb_column >=3:
            QMessageBox.about(self, "Error", "Cannot add more than 3 variants.")
            return

        if len(self.variants) > 0:
            msg_box = QMessageBox()
            msg_box.setText("Do you want to copy from another variant?")
            msg_box.setStandardButtons(QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)

            # Show the message box and get the response from the user
            response = msg_box.exec_()

            # Check the response and perform an action based on the button clicked
            if response == QMessageBox.Yes:
                self.copy()
            elif response == QMessageBox.No:
                self.new_variant()
            elif response == QMessageBox.Cancel:
                return
        else:   
            self.new_variant()

    def new_variant(self):
        if self.nb_column >=3:
            QMessageBox.about(self, "Error", "Cannot add more than 3 variants.")
            return
        
        Dialog = QtWidgets.QDialog()
        ui = Ui_Dialog()
        ui.setupUi(Dialog, True, "Unspecified" + str(self.nb_column))
        Dialog.show()
        rsp = Dialog.exec_()
        if rsp == QtWidgets.QDialog.Accepted:
            variant_name = ui.branch_name.text()
            self.variants[variant_name] = {}
            self.show_variant(variant_name)
            self.nb_column += 1

    def copy(self):
        if self.nb_column >=3:
            QMessageBox.about(self, "Error", "Cannot add more than 3 variants.")
            return
        
        last_name = "Default"
        last_value = {}
        list_names = []
        for name, value in self.variants.items():
            last_name = name
            last_value = value
            list_names.append(name)

        Dialog = QtWidgets.QDialog()
        ui = Ui_Dialog()
        ui.setupUi(Dialog, True, last_name + "_new")
        Dialog.show()
        rsp = Dialog.exec_()
        if rsp == QtWidgets.QDialog.Accepted:
            
            item, ok = QInputDialog.getItem(self,"Copy variant","Which variant you want to copy from?",list_names,0,False)

            if ok:
                self.update_variants()
                variant_name = ui.branch_name.text()
                self.variants[variant_name] = self.variants[item]
                self.show_variant(variant_name)
                self.nb_column += 1
        

    def reset(self):
        list_names = []
        for name, _ in self.variants.items():
            list_names.append(name)

        item, ok = QInputDialog.getItem(self,"Remove variant","Which variant you want to remove?",list_names,0,False)

        if ok:
            for j in range(len(self.variants)):
                for i, crit in enumerate(self.minmax_dictionnary.items()):
                    self.doubleSpinBox[j][i].deleteLater()
                    self.var_name[j].setText("")
                
            self.doubleSpinBox = [[]*3]

            new_variants = {}

            for name, value in self.variants.items():
                if name != item:
                    new_variants[name] = value

            self.variants = new_variants

            self.nb_column = len(self.variants)
            for i in range(self.nb_column):
                self.show_variant(list(self.variants.keys())[i], i)

    def next_page(self):

        self.output_dict = {}

        #value1 = []
        #value2 = []
        #value3 = []
        self.nb_column += 1

        for i, crit in enumerate (self.minmax_dictionnary.items()):
            self.output_dict[crit[0]] = [self.doubleSpinBox[0][i].value()]
            if(self.nb_column == 3 or self.nb_column == 4):
                self.output_dict[crit[0]] = (self.doubleSpinBox[0][i].value(), self.doubleSpinBox[1][i].value())
            if(self.nb_column == 4):
                self.output_dict[crit[0]] = (self.doubleSpinBox[0][i].value(), self.doubleSpinBox[1][i].value(), self.doubleSpinBox[2][i].value())
        # Here we should get the dictionnary from Coline's work: matching each indicator with its value input
            
        values_dict = self.output_dict
        computed_value_for_indicator_dict = {}

        # We need to check if the number of columns is greater than 1 or not
        if self.nb_column-1 > 1:
            for node in self.t.traverse("postorder"):
                if  node.is_leaf()== True:
                    # It is an indicator
                    indicator_dict  = self.complete_dictionnary[node.name]
                    indicator_value = values_dict[node.name]
                    weight = float(indicator_dict["weight"])
                    x_min = int(indicator_dict["x_min"])
                    x_max = int(indicator_dict["x_max"])
                    geometric_P = float(indicator_dict["geometric_P"])
                    geometric_K = float(indicator_dict["geometric_K"])
                    geometric_C = float(indicator_dict["geometric_C"])
                    infl_point_coord = [geometric_C,geometric_K]
                    binary = int(indicator_dict["binary"])
                    descending = int(indicator_dict["descending"])
                    computed_value = []
                    computed_value_for_indicator_dict[node.name] = []
                    for ind_val in indicator_value:
                        if binary:
                            if descending:
                                if ind_val == 0:
                                    computed_value.append(1)
                                else:
                                    computed_value.append(0)
                            else:
                                if ind_val == 0:
                                    computed_value.append(0)
                                else:
                                    computed_value.append(1)
                        else:
                            computed_value = evaluate_function(geometric_P,infl_point_coord,x_min,x_max,ind_val,descending)
                        computed_value_for_indicator_dict[node.name].append(computed_value)

            computed_value_for_criteria_dict = {}
            for node in self.t.traverse("postorder"):
                if node.is_leaf() == False and node.is_root() == False and node.up.up!= None : #It's a criteria
                    computed_value_for_criteria_dict[node.name] = []
                    for i in range (0,self.nb_column-1):
                        criteria_value = 0
                        for ind in node.get_children(): #Indicators are children of criterias
                            criteria_value = criteria_value + float(computed_value_for_indicator_dict[ind.name][i])*float(self.complete_dictionnary[ind.name]["weight"])
                        computed_value_for_criteria_dict[node.name].append(criteria_value)

            computed_value_for_pillars_dict = {}
            final_score = np.zeros(self.nb_column-1)
            for node in self.t.traverse("postorder"):
                if  node.is_root() == False and node.up.is_root(): # Then it's a pillar
                    computed_value_for_pillars_dict[node.name] = []
                    for i in range (0,self.nb_column-1):
                        pillar_value = 0
                        for crit in node.get_children():
                            pillar_value = pillar_value + computed_value_for_criteria_dict[crit.name][i]*float(self.complete_dictionnary[crit.name])
                        computed_value_for_pillars_dict[node.name].append(pillar_value)
                        final_score[i] = final_score[i] + pillar_value*self.complete_dictionnary[node.name]


        else:
            for node in self.t.traverse("postorder"):
                if  node.is_leaf()== True:
                    # It is an indicator
                    indicator_dict  = self.complete_dictionnary[node.name]
                    indicator_value = float(values_dict[node.name][0])
                    weight = float(indicator_dict["weight"])
                    x_min = int(indicator_dict["x_min"])
                    x_max = int(indicator_dict["x_max"])
                    geometric_P = float(indicator_dict["geometric_P"])
                    geometric_K = float(indicator_dict["geometric_K"])
                    geometric_C = float(indicator_dict["geometric_C"])
                    infl_point_coord = [geometric_C,geometric_K]
                    binary = int(indicator_dict["binary"])
                    descending = int(indicator_dict["descending"])
                    if binary:
                        if descending:
                            if indicator_value == 0:
                                computed_value = 1
                            else:
                                computed_value = 0
                        else:
                            if indicator_value == 0:
                                computed_value = 0
                            else:
                                computed_value = 1
                    else:
                        computed_value = [evaluate_function(geometric_P,infl_point_coord,x_min,x_max,indicator_value,descending)]
                    computed_value_for_indicator_dict[node.name] = computed_value
            computed_value_for_criteria_dict = {}
            for node in self.t.traverse("postorder"):
                if node.is_leaf() == False and node.is_root() == False and node.up.up!= None : #It's a criteria
                    criteria_value = 0
                    for ind in node.get_children(): #Indicators are children of criterias
                        criteria_value = criteria_value + float(computed_value_for_indicator_dict[ind.name][0])*float(self.complete_dictionnary[ind.name]["weight"])
                    computed_value_for_criteria_dict[node.name] = [criteria_value]
        
            computed_value_for_pillars_dict = {}
            final_score = 0
            for node in self.t.traverse("postorder"):
                if  node.is_root() == False and node.up.is_root(): # Then it's a pillar
                    pillar_value = 0
                    for crit in node.get_children():
                        pillar_value = pillar_value + computed_value_for_criteria_dict[crit.name][0]*float(self.complete_dictionnary[crit.name])
                    computed_value_for_pillars_dict[node.name] = [pillar_value]
                    final_score = final_score + pillar_value*self.complete_dictionnary[node.name]

        # Puts everything in the graph
        pilar_dictionnary = computed_value_for_pillars_dict
        criteria_dictionnary = computed_value_for_criteria_dict
        indicator_dictionnary = computed_value_for_indicator_dict
        if self.nb_column-1 == 1:
            final_value = [final_score]
        else:
            final_value = final_score.tolist()
        complete_dictionnary = self.complete_dictionnary
        t = self.t
    
        self.nb_column +=  -1

        self.window=QtWidgets.QMainWindow()
        self.ui=Ui_Dialog_for_graph()      #------------->creating an object
        self.ui.setupUi_for_graph(self.variants, self.window, pilar_dictionnary,criteria_dictionnary,indicator_dictionnary,final_value,t,complete_dictionnary)
        self.window.show()


        # Stuff for table
        self.ui = Table(self.complete_dictionnary,values_dict,pilar_dictionnary,criteria_dictionnary,indicator_dictionnary,final_value)
        

if __name__ == "__main__":
    import sys

    complete_dictionnary = {'Construction Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Indirect Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Rehabilitation Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Dismantling Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Production & Assembly': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Co2-eq Emissions': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Energy Consumption': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Index of Efficiency': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Index of risks': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Social Benefits': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Disturbances': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Cost': 0.61, 
                  'Time': 0.39, 
                  'Economic': 0.36,
                  'Emissions': 0.55, 
                  'Energy': 0.19, 
                  'Materials': 0.26, 
                  'Environmental': 0.39, 
                  'Safety': 0.6, 
                  '3rd Party affect': 0.4, 
                  'Social': 0.25, 
                  '': 0} 

    indicator_dictionnary = {'Construction Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Indirect Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Rehabilitation Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Dismantling Cost': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Production & Assembly': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Co2-eq Emissions': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Energy Consumption': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Index of Efficiency': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Index of risks': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Social Benefits': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False},
                  'Disturbances': {'x_min': 1, 'x_max': 10, 'geometric_P': 1, 'geometric_K': 0, 'geometric_C': 1, 'binary': False, 'descending': False}} 

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_ValuesWindow()
    ui.setupUi(MainWindow, complete_dictionnary, indicator_dictionnary, self.t)
    MainWindow.show()
    sys.exit(app.exec_())

